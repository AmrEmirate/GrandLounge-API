// This is your Prisma schema file for Stazy App

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUMS ---
enum UserRole {
  TENANT
  USER
}

enum BookingStatus {
  MENUNGGU_PEMBAYARAN
  SUDAH_DIBAYAR
  DIBATALKAN
  SELESAI
}

enum PropertyCategory {
  HOTEL
  APARTEMEN
  VILLA
  GUEST_HOUSE
}

enum BEDOPTION {
  SINGLE
  DOUBLE
  TWIN
}

enum RoomCategory {
  STANDARD
  DELUXE
  SUITE
}

// --- MODELS ---
model User {
  id             Int      @id @default(autoincrement())
  role           UserRole
  full_name      String
  email          String   @unique
  password       String
  profilePicture String?
  verified       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  tenant   Tenant?
  bookings Booking[]
  reviews  Review[]
}

model Tenant {
  id                   Int      @id @default(autoincrement())
  user_id              Int      @unique
  company_name         String
  address_company      String
  phone_number_company String
  email                String   @unique
  password             String
  profilePicture       String?
  verified             Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user       User             @relation(fields: [user_id], references: [id])
  properties Property_Hotel[]
}

model Property_Hotel {
  id                Int              @id @default(autoincrement())
  tenant_id         Int
  name_property     String
  property_category PropertyCategory
  description       String
  location          String
  provinsi          String
  zip_code          String
  main_image        String?
  deletedAt         DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  tenant   Tenant           @relation(fields: [tenant_id], references: [id])
  images   Property_Image[]
  rooms    Room[]
  bookings Booking[]
  reviews  Review[]
}

model Property_Image {
  id          Int    @id @default(autoincrement())
  property_id Int
  image_url   String

  // Relations
  property Property_Hotel @relation(fields: [property_id], references: [id])
}

model Room {
  id          Int       @id @default(autoincrement())
  property_id Int
  name        String
  description String
  bedoption   BEDOPTION
  image_room  String?
  capacity    Int
  basePrice   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  property     Property_Hotel   @relation(fields: [property_id], references: [id])
  images       Room_Image[]
  availability Room_Available[]
  bookingRooms Booking_Rooms[]
}

model Room_Image {
  id        Int    @id @default(autoincrement())
  room_id   Int
  image_url String

  // Relations
  room Room @relation(fields: [room_id], references: [id])
}

model Room_Available {
  id          Int      @id @default(autoincrement())
  room_id     Int
  isAvailable Boolean  @default(true)
  date        DateTime
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  room Room @relation(fields: [room_id], references: [id])
}

model Booking {
  id               Int           @id @default(autoincrement())
  user_id          Int
  property_id      Int
  invoice_number   String
  check_in         DateTime
  check_out        DateTime
  total_price      Float
  status           BookingStatus
  amount           Float
  category_room    RoomCategory
  payment_deadline DateTime
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  user          User            @relation(fields: [user_id], references: [id])
  property      Property_Hotel  @relation(fields: [property_id], references: [id])
  booking_rooms Booking_Rooms[]
  reviews       Review[]
}

model Booking_Rooms {
  id               Int          @id @default(autoincrement())
  booking_id       Int
  room_id          Int
  guest_count      Int
  overnight_price  Float
  how_many_nights  Int
  total_many_night Float
  category_rooms   RoomCategory
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  booking Booking @relation(fields: [booking_id], references: [id])
  room    Room    @relation(fields: [room_id], references: [id])
}

model Review {
  id           Int      @id @default(autoincrement())
  user_id      Int
  property_id  Int
  booking_id   Int
  comment      String
  tenant_reply String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user     User           @relation(fields: [user_id], references: [id])
  property Property_Hotel @relation(fields: [property_id], references: [id])
  booking  Booking        @relation(fields: [booking_id], references: [id])
}
